/*

	This file is part of LMAO (Low-level Malbolge Assembler, Ooh!), an assembler for Malbolge.
	Copyright (C) 2013 Matthias Ernst

	LMAO is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	LMAO is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <http://www.gnu.org/licenses/>.

	E-Mail: info@matthias-ernst.eu

*/

/*
 * This file provides generation of Malbolge initialization code.
 * The Malbolge initialization code is necessary to initialize cells used by the Malbolge program with arbitrary values and is executed at the beginning.
 * It ends with a jump to the entry point of the converted HeLL program.
 */

#ifndef GENINITINCLUDED
#define GENINITINCLUDED

/**
 * TODO
 */
typedef struct DRegPos {
	/**
	 * -1 if pos is absolute address; 0-3 if pos is relative address
	 */
	int module;
	/**
	 * TODO
	 */
	int pos;
} DRegPos;

/**
 * TODO
 */
#define CELLTYPE_PTR 0

/**
 * TODO
 */
#define CELLTYPE_CONST 1

/**
 * TODO
 */
#define CELLTYPE_VAR 2

/**
 * TODO
 */
#define CELLTYPE_C20_OR_C21 3

/**
 * TODO
 */
typedef struct Cell {
	/**
	 * TODO
	 */
	int type;
	/**
	 * TODO
	 */
	int value; /* if type != PTR */
	/**
	 * TODO
	 */
	DRegPos destination; /* if type == PTR */
} Cell;

/**
 * This struct stores the values of the memory cells that are related to a data module.
 */
typedef struct Module {
	/**
	 * Number of cells in the data module. Must not exceed 15.
	 */
	int num_of_cells;
	/**
	 * Current value of the cells. Only the first num_of_cells entries will be used.
	 */
	Cell cells[15]; /* maximum number used at the moment */
} Module;

/**
 * This struct represents the state of the constant generation data module during execution of the Malbolge initialization code.
 */
typedef struct State {
	/**
	 * Content of the A register.
	 */
	int a_reg;
	/**
	 * Position the D register points to.
	 */
	DRegPos d_reg;
	/**
	 * \brief State of the memory cells that belong to the constant generation data module.
	 *
	 * The constant generation data module is is composed of multiple data modules. The states of all these data modules are stored in this array.
	 */
	Module modules[4]; /* 4 modules at the moment */
	/**
	 * Address of the last preinitialized cell. Memory cells behing this cell are assumed to store the value 81 or (C1-81) dependend on their distance to the last_preinitialized memory cell.
	 * The value of memory cells outside the constant generation data module with a lower offset than last_preinitialized is not stored by this struct, so their value is completely unknown.
	 */
	int last_preinitialized; /* address of last preinitialized cell */
} State;

/**
 * Converts normalized Malbolge code to denormalized Malbolge code that can be executed by the Malbolge interpreter.
 *
 * \param normalized_code Buffer with normalized Malbolge code. It will be replaced by the denormalized code. This buffer must contain only these characters any number of times: 'o', 'j', 'p', '*', 'i', '<', '/', and/or 'v'
 * \param normalized_code_offset Offset of the given normalized code in the Malbolge program. This information is necessary for denormalizing code that does not start at offset 0 because the ASCII characters of denormalized code are dependent on their position.
 * \param code_len Number of bytes that should be denormalized.
 * \param no_error_printing TODO
 * \return A non-zero value is returned in the case that this function succeeds. Otherwise, zero is returned.
 */
int denormalize_malbolge(char* normalized_code, int normalized_code_offset, int code_len, int no_error_printing);

/**
 * Generates a sequence of normalized Malbolge commands that initializes a given memory cell with a given value using the data module for constant generation.
 * The state of the data module may be changed by this function. The given memory cell and all memory cells behind the given cell must not be initialized. Their value must be 81 or (C1-81) depending on their distance to the last_preinitialized field in State.
 * The generated Malbolge code only works with the correct data module and if the state of the virtual Malbolge machine is equivalent to the state given to this function right before executing the first command of the code that will be generated by this function.
 *
 * \param init_position Position of the memory cell that should be initialized.
 * \param init_value Target value of the memory cell.
 * \param normalized_init_code The generated normalized Malbolge code will be written to this buffer.
 * \param current_state Current state of the data module in the virtual Malbolge machine right before executing the code that will be generated by this function.
 * \param max_init_code_length Size of the normalized_init_code buffer.
 * \param no_error_printing TODO
 * \return Length of generated Malbolge initialization code for the given memory cell or -1 if an error occurred.
 */
int generate_normalized_init_code_for_word_with_module_system(int init_position, int init_value, char* normalized_init_code, State* current_state, int max_init_code_length, int no_error_printing);

/**
 * TODO
 *
 * \param entry_point TODO
 * \param normalized_init_code TODO
 * \param current_state TODO
 * \param max_init_code_length TODO
 * \param no_error_printing TODO
 * \return length of generated init code or -1 if an error occurs.
 */
int generate_jump_to_entrypoint_with_module_system(int entry_point, char* normalized_init_code, State* current_state, int max_init_code_length, int no_error_printing);

#endif

